{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GridGifItem.js","components/Grid.js","hooks/useFetchGifs.js","GifProviderApp.js","reportWebVitals.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","cat","type","value","onChange","target","getGifs","category","a","console","log","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GridGifItem","className","src","alt","Grid","loading","state","setState","useEffect","then","useFetchGifs","GifProviderApp","categories","idx","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"+MAkCeA,EA/BK,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAEHC,mBAAS,IAFN,mBAEhCC,EAFgC,KAEpBC,EAFoB,KAavC,OAEI,sBAAMC,SATW,SAACC,GAClBA,EAAEC,iBACEJ,IACJF,GAAe,SAAAO,GAAG,4BAAQA,GAAR,CAAaL,OAC/BC,EAAc,MAKd,SACI,uBACIK,KAAK,OACLC,MAAQP,EACRQ,SAfc,SAACL,GAAD,OAAOF,EAAcE,EAAEM,OAAOF,a,+BCP/CG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACnBC,QAAQC,IAAIH,GACNI,EAFa,iDAEoCC,UAAUL,GAF9C,+DAGAM,MAAMF,GAHN,cAGbG,EAHa,gBAIEA,EAAKC,OAJP,uBAIZC,EAJY,EAIZA,KACDC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EAEzB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAVvB,kBAcZM,GAdY,4CAAH,sDCcLO,EAbK,SAAC,GAAuB,EAArBJ,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAE9B,OACI,sBAAKc,UAAU,yBAAf,UACI,qBAAKC,IAAMf,EAAMgB,IAAMN,IACvB,4BACMA,QCwBHO,EA3BK,SAAC,GAAgB,IAAfrB,EAAc,EAAdA,SAAc,ECCR,SAACA,GAAc,IAAD,EACZZ,mBAAS,CAC/BqB,KAAM,GACNa,SAAS,IAHyB,mBAC/BC,EAD+B,KACxBC,EADwB,KAYtC,OANAC,qBAAU,WACN1B,EAAQC,GAAU0B,MAAK,SAACjB,GAAD,OAAUe,EAAS,CAACf,OAAMa,SAAS,SAC5D,CAACtB,IAIIuB,EDX2BI,CAAa3B,GAAjCe,EAFkB,EAExBN,KAAca,EAFU,EAEVA,QAEtB,OACI,qCACI,6BAAMtB,IAEJsB,GAAW,mBAAGJ,UAAU,iBAAb,wBAGT,qBAAKA,UAAU,YAAf,SAEQH,EAAOJ,KAAI,SAACC,GAAD,OACP,cAAC,EAAD,eAESA,GADCA,EAAIC,SAO9B,2BEtBCe,EAAiB,WAAO,IAAD,EAEIxC,mBAAS,CAAC,cAFd,mBAEzByC,EAFyB,KAEb1C,EAFa,KAIhC,OACI,qCACI,gDAGA,cAAE,EAAF,CAAcA,cAAgBA,IAC9B,uBAEA,6BAEQ0C,EAAWlB,KAAI,SAACjB,EAAKoC,GACjB,OAAO,cAAC,EAAD,CAEH9B,SAAUN,GADJoC,YCRnBC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBP,MAAK,YAAkD,IAA/CQ,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCAdO,IAASC,OACP,cAAE,EAAF,IAAqBC,SAASC,eAAe,SAM/CX,M","file":"static/js/main.243ec4de.chunk.js","sourcesContent":["import  { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst AddCategory = ({ setCategories }) => {\r\n    \r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n    const handleInputChange = (e) => setInputValue(e.target.value);\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        if(!inputValue) return;\r\n        setCategories( cat => [...cat, inputValue] );\r\n        setInputValue(\"\");\r\n    }\r\n\r\n    return (\r\n       \r\n        <form onSubmit= { handleSubmit } >\r\n            <input \r\n                type=\"text\" \r\n                value={ inputValue } \r\n                onChange={ handleInputChange }\r\n            />\r\n        </form>\r\n\r\n    );\r\n\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n};\r\n\r\nexport default AddCategory;","export const getGifs = async (category) => {\r\n    console.log(category)\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&api_key=wxZG2HVTt9mOB6Xhx55UTAi6migipmOF&limit=15`;\r\n    const resp = await fetch(url);\r\n    const {data} = await resp.json();\r\n    const gifs = data.map(img => {\r\n\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    })\r\n   \r\n    return gifs;\r\n};","\r\nconst GridGifItem = ( {id, title, url} ) => {\r\n\r\n    return(\r\n        <div className=\"card animate__bounceIn\">\r\n            <img src={ url } alt={ title } />\r\n            <p>\r\n                { title }\r\n            </p>\r\n           \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GridGifItem;","import React from 'react';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport GridGifItem from './GridGifItem';\r\n\r\nexport const Grid = ({category}) => {\r\n\r\n    const { data: images, loading } = useFetchGifs(category);\r\n\r\n    return (\r\n        <>\r\n            <h3>{ category }</h3>\r\n\r\n            { loading && <p className=\"animate__flash\" >Loading...</p> }\r\n\r\n            {\r\n                <div className=\"card-grid\">\r\n                    {\r\n                        images.map((img) => (\r\n                            <GridGifItem \r\n                                key={ img.id }\r\n                                { ...img }  \r\n                            />\r\n                        ))\r\n                    }        \r\n                </div>\r\n            }\r\n            <hr />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Grid;","\r\nimport { useState, useEffect } from 'react';\r\nimport { getGifs } from '../helpers/getGifs';\r\n\r\n\r\nexport const useFetchGifs = (category) => {\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    useEffect(() => { // ejecuta la funciÃ³n solo la primera vez que se renderiza\r\n        getGifs(category).then((data)  =>setState({data, loading: false}))\r\n    },[category]);\r\n\r\n\r\n\r\n    return state; //{ data: [], loading: true }\r\n}","import React, { useState } from 'react';\r\nimport AddCategory from './components/AddCategory';\r\nimport Grid from './components/Grid';\r\n\r\nexport const GifProviderApp = () => {\r\n\r\n    const [categories, setCategories] = useState(['spiderman']);\r\n\r\n    return (\r\n        <>\r\n            <span>\r\n                Gif-Provider\r\n            </span> \r\n            < AddCategory setCategories={ setCategories } />\r\n            <hr />\r\n\r\n            <ul>\r\n                {\r\n                    categories.map((cat, idx) => {\r\n                        return <Grid \r\n                            key={ idx } \r\n                            category={cat} \r\n                        />\r\n                    }) \r\n                }\r\n            </ul>\r\n        </>\r\n    )\r\n\r\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { GifProviderApp } from './GifProviderApp'\n\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  < GifProviderApp />, document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}